import {User, Order} from '../models/index.js';

class NotificationService {
    constructor() {
        this.queue = [];
        this.processing = false;
        this.processInterval = null;

        this.startProcessing();
    }

    addToQueue(type, data) {
        const task = {
            id: Date.now() + Math.random(),
            type,
            data,
            attempts: 0,
            maxAttempts: 3,
            createdAt: new Date()
        };

        this.queue.push(task);
        console.log(`–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${type}`, data);
    }

    startProcessing() {
        if (this.processInterval) return;

        this.processInterval = setInterval(async () => {
            if (!this.processing && this.queue.length > 0) {
                await this.processQueue();
            }
        }, 5000);

        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
    }

    stopProcessing() {
        if (this.processInterval) {
            clearInterval(this.processInterval);
            this.processInterval = null;
        }
    }

    async processQueue() {
        if (this.processing || this.queue.length === 0) return;

        this.processing = true;
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏: ${this.queue.length} –∑–∞–¥–∞—á`);

        const failedTasks = [];

        for (const task of this.queue) {
            try {
                await this.processTask(task);
                console.log(`–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${task.type} (${task.id})`);
            } catch (error) {
                task.attempts++;
                console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${task.type} (–ø–æ–ø—ã—Ç–∫–∞ ${task.attempts}):`, error.message);

                if (task.attempts < task.maxAttempts) {
                    failedTasks.push(task);
                } else {
                    console.error(`–ó–∞–¥–∞—á–∞ ${task.type} (${task.id}) –æ—Ç–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ ${task.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
                }
            }
        }

        this.queue = failedTasks;
        this.processing = false;
    }
    async processTask(task) {
        switch (task.type) {
            case 'orderCreated':
                await this.sendOrderCreatedNotification(task.data);
                break;
            case 'orderStatusChanged':
                await this.sendOrderStatusChangedNotification(task.data);
                break;
            case 'orderCancelled':
                await this.sendOrderCancelledNotification(task.data);
                break;
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}`);
        }
    }

    async sendOrderCreatedNotification(data) {
        const {orderId, userId} = data;

        const user = await User.findByPk(userId, {
            attributes: ['id', 'name', 'email']
        });

        const order = await Order.findByPk(orderId);

        if (!user || !order) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await this.sendEmail({
            to: user.email,
            subject: `–ó–∞–∫–∞–∑ #${order.id} —Å–æ–∑–¥–∞–Ω`,
            template: 'orderCreated',
            data: {
                userName: user.name,
                orderId: order.id,
                totalAmount: order.total_amount,
                estimatedDelivery: order.estimated_delivery
            }
        });
    }

    async sendOrderStatusChangedNotification(data) {
        const {orderId, userId, newStatus} = data;

        const user = await User.findByPk(userId, {
            attributes: ['id', 'name', 'email']
        });

        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const statusNames = {
            pending: '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            confirmed: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            rejected: '–æ—Ç–∫–ª–æ–Ω–µ–Ω',
            cancelled: '–æ—Ç–º–µ–Ω–µ–Ω',
            shipped: '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            delivered: '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        };

        await this.sendEmail({
            to: user.email,
            subject: `–ó–∞–∫–∞–∑ #${orderId} - ${statusNames[newStatus]}`,
            template: 'orderStatusChanged',
            data: {
                userName: user.name,
                orderId,
                newStatus: statusNames[newStatus]
            }
        });
    }
    async sendOrderCancelledNotification(data) {
        const {orderId, userId} = data;

        const user = await User.findByPk(userId, {
            attributes: ['id', 'name', 'email']
        });

        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await this.sendEmail({
            to: user.email,
            subject: `–ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ–Ω–µ–Ω`,
            template: 'orderCancelled',
            data: {
                userName: user.name,
                orderId
            }
        });
    }

    async sendEmail({to, subject, template, data}) {
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

        console.log(`üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:
        –ö–æ–º—É: ${to}
        –¢–µ–º–∞: ${subject}
        –®–∞–±–ª–æ–Ω: ${template}
        –î–∞–Ω–Ω—ã–µ:`, data);

        if (Math.random() < 0.1) {
            throw new Error('–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ email');
        }
    }

    getQueueStats() {
        return {
            queueLength: this.queue.length,
            processing: this.processing,
            tasks: this.queue.map(task => ({
                id: task.id,
                type: task.type,
                attempts: task.attempts,
                createdAt: task.createdAt
            }))
        };
    }
}

export default new NotificationService();